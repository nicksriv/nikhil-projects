image: amazon/aws-cli:2.9.4  # Use an image that includes AWS CLI

pipelines:
  custom:
    pre-prod-deploy:  # Define a custom pipeline
      - step:
          name: Build, Push, and Deploy to ECS
          services:
            - docker
          script:
            # Set environment variables securely (through Bitbucket UI)
            - export AWS_REGION=$AWS_REGION
            - export ECR_URI=$ECR_URI
            - export ECS_CLUSTER=$ECS_CLUSTER
            - export TASK_DEFINITION_FAMILY=$TASK_DEFINITION_FAMILY

            # Login to AWS ECR
            - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URI
            
            # Build Docker image
            - docker build -t $TASK_DEFINITION_FAMILY .
            
            # Tag and push Docker image to ECR
            - docker tag $TASK_DEFINITION_FAMILY:latest $ECR_URI:latest
            - docker push $ECR_URI:latest

            # Create new ECS Task Definition revision
            - |
              TASK_DEFINITION_JSON=$(cat <<EOF
              {
                "family": "$TASK_DEFINITION_FAMILY",
                "containerDefinitions": [
                  {
                    "name": "$TASK_DEFINITION_FAMILY-container",
                    "image": "$ECR_URI:latest",
                    "cpu": 0,
                    "portMappings": [
                      {
                        "containerPort": 80,
                        "hostPort": 80,
                        "protocol": "tcp"
                      }
                    ],
                    "essential": true,
                    "logConfiguration": {
                      "logDriver": "awslogs",
                      "options": {
                        "awslogs-group": "/ecs/$TASK_DEFINITION_FAMILY",
                        "awslogs-region": "$AWS_REGION",
                        "awslogs-stream-prefix": "ecs"
                      }
                    }
                  }
                ],
                "taskRoleArn": "$TASK_ROLE_ARN",
                "executionRoleArn": "$EXECUTION_ROLE_ARN",
                "networkMode": "awsvpc",
                "requiresCompatibilities": ["FARGATE"],
                "cpu": "2048",
                "memory": "4096"
              }
              EOF
              )
              NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$TASK_DEFINITION_JSON" --query 'taskDefinition.taskDefinitionArn' --output text)

            # Update ECS Service to use the new task definition
            - aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE_NAME --task-definition $NEW_TASK_DEF_ARN
            
            # Success message
            - echo "Deployment successful! New task definition registered and ECS service updated."

      - step:
          name: Wait and Register Target
          script:
            # Wait for 2 minutes
            - echo "Waiting for 2 minutes before executing the script..."
            - sleep 120
            
            # Ensure the script is executable
            - chmod +x register-targets-new.sh
            
            # Run the script
            - ./register-targets-new.sh
